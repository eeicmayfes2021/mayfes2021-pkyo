import Blockly from 'blockly';
import Phaser from 'phaser';
import map1 from './stage/tilemap.json';
import tiles from './stage/map.png';
import player1 from './stage/player.png';
var config = {
    type: Phaser.AUTO,
    width: 480,
    height: 600,
    parent: 'phaserDiv',
    physics:{
        default: 'arcade',
        arcade: {
            gravity: {
                x: 0,
                y: 0,
            },
            debug: false,
        }
    },
    //ここにシーンを追加(preloadとかはここで定義しなくても良い)
    scene: {
        preload: preload, // 以下に定義する preload 関数をセットする
        create: create, // 以下に定義する create 関数をセットする
        update: update // 以下に定義する update 関数をセットする
    },
    render: {
        transparent: true,
    },
};

const blocklyDiv = document.getElementById("blocklyDiv");
blocklyDiv.style.left = config.width;
var player;
// ゲーム開始!!!
var game = new Phaser.Game(config);
// ゲーム開始前に呼び出される関数定義
function preload ()
{ // アセット（画像とか）の取得を行う
    //ここのthisはおそらくPhaser.AUTOのこと
    this.load.tilemapTiledJSON('map1', map1);
    this.load.image("tiles", tiles);
    this.load.spritesheet("player", player1, { frameWidth: 32, frameHeight: 48});
}
var mapDat;
var map2Img;
// ゲーム開始時に呼び出される関数
function create ()
{ // 背景を設定したり、プレイヤーの初期配置をしたりする
    //canvasとmapの大きさは比率も合わせて一致している必要があります。
    mapDat = this.add.tilemap("map1");
    let tileset = mapDat.addTilesetImage("tileset", "tiles");
    this.backgroundLayer = mapDat.createLayer("ground", tileset);
    map2Img = game.canvas.width / this.backgroundLayer.width;
    this.backgroundLayer.setScale(map2Img);
    //これ、このままではまずくて、ステージとキャラクターのズレをなくすためにステージと同じ座標軸でキャラクターを配置したい
    player = this.add.sprite(130, 350, "player");
    //player.setOrigin(0, 1);
}

// ゲーム進行時に呼び出される関数
function update ()
{ //プレイヤーを動かしたり、衝突判定からのロジックを回したり
    //ここでblockが使われたらこの動作をします的なことを書きます
    //多分キャラクターの座標更新だけなので難しくなさそう。
}
//これでブロックを追加
Blockly.Blocks['lightswitch'] = {
    init: function() {
      this.appendDummyInput()
          .appendField("Turn")
          .appendField(new Blockly.FieldDropdown([["red","R"], ["blue","B"]]), "lightcolor")
          .appendField(new Blockly.FieldDropdown([["on","T"], ["off","F"]]), "switch");
      this.setColour(270);
   this.setTooltip("");
   this.setHelpUrl("");
    }
  };
  //ブロックの実際の機能を定義
  Blockly.JavaScript['stoplightswitch'] = function(block) {
    var dropdown_colorlist = block.getFieldValue('colorlist');
    var dropdown_switch = block.getFieldValue('switch');
    var value_lightno = Blockly.JavaScript.valueToCode(block, 'lightno', Blockly.JavaScript.ORDER_ATOMIC);
    // TODO: Assemble JavaScript into code variable.
    var code = '...;\n';
    return code;
  };
  var options = {
    toolbox: xmlFile,
    collapse: true,
    comments: true,
    disable: true,
    maxBlocks: Infinity,
    trashcan: true,
    horizontalLayout: false,
    toolboxPosition: 'start',
    css: true,
    rtl: false,
    scrollbars: true,
    sounds: true,
    oneBasedIndex: true,
    grid: {
      spacing: 20,
      length: 1,
      colour: '#888',
      snap: true
    }
  }

  //put the toolbox in the workspace
  var workspace = Blockly.inject('blocklyDiv', options);
  // take the text generated by the blocks and run it as code
  function runCode() {
      window.LoopTrap = 1000;
      Blockly.JavaScript.INFINITE_LOOP_TRAP = 'if (--window.LoopTrap == 0) throw "Infinite loop.";¥n';
      var code = Blockly.JavaScript.workspaceToCode(workspace);
      Blockly.JavaScript.INFINITE_LOOP_TRAP = null;
      try {
          eval(code);
      } catch (e) {
          alert(e);
      }
  }